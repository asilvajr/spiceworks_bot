{
  "author": {
    "name": "Alain Gilbert",
    "email": "alain.gilbert.15@gmail.com",
    "url": "http://agilbert.name/"
  },
  "contributors": [
    {
      "name": "Jeff Stieler",
      "email": "jeff.m.stieler@gmail.com",
      "url": "http://jeffstieler.com"
    }
  ],
  "name": "ttapi",
  "description": "A turntable.fm API",
  "keywords": [
    "turntable.fm",
    "turntable",
    "stickybits",
    "realtime"
  ],
  "version": "2.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/alaingilbert/Turntable-API.git"
  },
  "main": "lib/index.js",
  "scripts": {
    "start": "./examples/chat_bot.js"
  },
  "engines": {
    "node": ">= v0.4.0"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "#Turntable API\n\nA simple nodejs wrapper for the turntable API.\nYou'll need to find your `AUTH`, `USERID` and `ROOMID` information with [this bookmarklet](http://alaingilbert.github.com/Turntable-API/bookmarklet.html).\n\nTtapi is also available in [Python](https://github.com/alaingilbert/Turntable-API/tree/python_ttapi) and [Ruby](https://github.com/alaingilbert/Turntable-API/tree/ruby_ttapi).\n\nSee also [turntabler](https://github.com/obrie/turntabler) (Ruby) maintained by [obrie](https://github.com/obrie).\n\n## Installation\n    npm install ttapi\nIf you are having problems with npm (like with Windows nodejs or portable versions), just clone the repo and edit the templates in the 'examples' folder!\n\n## Examples\n\n### Chat bot\n\nThis bot responds to anybody who writes \"/hello\" in the chat.\n\n```js\nvar Bot = require('ttapi');\nvar bot = new Bot(AUTH, USERID, ROOMID);\n\nbot.on('speak', function (data) {\n  // Respond to \"/hello\" command\n  if (data.text.match(/^\\/hello$/)) {\n    bot.speak('Hey! How are you @'+data.name+' ?');\n  }\n});\n```\n\n### Logger\n\nThis bot logs the room activity in the console.\n\n```js\nvar Bot    = require('ttapi');\nvar AUTH   = 'auth+live+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';\nvar USERID = 'xxxxxxxxxxxxxxxxxxxxxxxx';\nvar ROOMID = 'xxxxxxxxxxxxxxxxxxxxxxxx';\n\nvar bot = new Bot(AUTH, USERID);\n\nbot.on('ready',        function (data) { bot.roomRegister(ROOMID); });\nbot.on('roomChanged',  function (data) { console.log('The bot has changed room.', data); });\n\nbot.on('speak',        function (data) { console.log('Someone has spoken', data); });\nbot.on('update_votes', function (data) { console.log('Someone has voted',  data); });\nbot.on('registered',   function (data) { console.log('Someone registered', data); });\n```\n\n### Dynamic bot\n\n[REPL](http://nodejs.org/docs/v0.6.0/api/repl.html) allows you to dynamically call the bot functions and modify his variables during his execution.\n\n```js\nvar Bot  = require('ttapi')\n  , repl = require('repl');\n\nvar bot = new Bot(AUTH, USERID, ROOMID);\nrepl.start('> ').context.bot = bot;\n\n// ...\n```\n\n# Debugging\n\n```js\nbot.debug = true;\n```\n\nThat will print on the terminal all the data that you get and all the data that you send.\n\n# Hosting\n\n* [https://no.de/](https://no.de/) : Free (250mb memory/500mb storage) hosting for nodejs projects with SSH root access.\n* [http://www.nodejitsu.com/](http://www.nodejitsu.com/) : Free (scalable memory/storage not to be abused) hosting for nodejs projects.\n* [https://openshift.redhat.com/](https://openshift.redhat.com/) : Free (1.5gb memory/3gb storage) PaaS service that supports nodejs.\n\n\n# Documentation\n\n\n## Events\n\n[Here are some examples of the data that you'll receive from those events.](https://github.com/alaingilbert/Turntable-API/tree/master/turntable_data)\n\n### on('tcpConnect', function (socket) { })\n\nTriggered when a socket opens a connection.\n\n### on('tcpMessage', function (socket, msg) { })\n\nTriggered when the bot receives a tcp message.\n\n### on('tcpEnd', function (socket) { })\n\nTriggered when a socket closes its connection.\n\n### on('httpRequest', function (request, response) { })\n\nTriggered when the bot receives an http request.\n\n### on('roomChanged', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/room_infos.js)) { })\n\nTriggered when the bot enters a room.\n\n### on('registered', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/registered.js)) { })\n\nTriggered when a user enters the room.\n\n### on('deregistered', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/deregistered.js)) { })\n\nTriggered when a user leaves the room.\n\n### on('speak', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/speak.js)) { })\n\nTriggered when a new message is sent via the chat.\n\n### on('endsong', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/endsong.js)) { })\n\nTriggered at the end of the song. (Just before the newsong/nosong event)\n\nThe data returned by this event contains information about the song that has just ended.\n\n### on('newsong', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/newsong.js)) { })\n\nTriggered when a new song starts.\n\n### on('nosong', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/nosong.js)) { })\n\nTriggered when there is no song.\n\n### on('update_votes', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/update_votes.js)) { })\n\nTriggered when a user votes.\n\n###### Note\n\nThe userid is shown only if the user vote up, or changed his mind and then vote down.\n\n### on('booted_user', function (data) { })\n\nTriggered when a user gets booted.\n\n### on('update_user', function (data) { })\n\nTriggered when a user updates their name/profile.\n\n### on('add_dj', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/add_dj.js)) { })\n\nTriggered when a user takes a dj spot.\n\n### on('rem_dj', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/rem_dj.js)) { })\n\nTriggered when a user leaves a dj spot.\n\n### on('escort', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/escort.js)) { })\n\nTriggered when a user is escorted off the stage.\n\n### on('new_moderator', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/new_moderator.js)) { })\n\nTriggered when a user is promoted to a moderator.\n\n### on('rem_moderator', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/rem_moderator.js)) { })\n\nTriggered when a user loses his moderator title.\n\n### on('snagged', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/snagged.js)) { })\n\nTriggered when a user queues the currently playing song.\n\n### on('pmmed', function ([data](https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/pmmed.js)) { })\n\nTriggered when the bot receives a private message.\n\n\n## Actions\n\n### tcpListen ( port, address )\n\nStart a tcp server.\n\n### listen ( port, address )\n\nStart an http server.\n\n### roomNow ( [callback:fn] )\n\nGet the turntable server time.\n\n### listRooms ( skip=0:int [, callback:fn] )\n\nGet 20 rooms.\n\n### directoryGraph ( callback:fn )\n\nGet the location of your friends/idols.\n\n### directoryRooms( options:obj, callback:fn )\n\nGet a directory of rooms\n\n##### options\n\n* `limit` - The number of rooms to return\n* `section_aware`\n* `sort` - What to sort by\n\n### stalk ( userId:string [, allInformations=false:bool ], callback:fn )\n\nGet the location of a user. If `allInformations` is `true`, you'll also receive the information about the room and the user.\n\n###### Warning\n\nThis function will make the bot become a fan of the user.\n\n### getFavorites ( callback:fn )\n\nGet your favorite rooms.\n\n### addFavorite ( roomId:string [, callback:fn ] )\n\nAdd a room to your favorite rooms.\n\n### remFavorite ( roomId:string [, callback:fn ] )\n\nRemove a room from your favorite rooms.\n\n### roomRegister ( roomId:string [, callback:fn] )\n\nRegister in a room.\n\n### roomDeregister ( [callback:fn] )\n\nDeregister from the current room.\n\n### roomInfo ( [[extended=true:bool, ]callback:fn] )\n\nGet the current room information. Do not include song log if 'extended' is false.\n\n### speak ( msg:string [, callback:fn] )\n\nBroadcast a message in the chat.\n\n### bootUser ( userId:string, reason:string [, callback:fn] )\n\nBoot a user.\n\n### boot ( userId:string, reason:string [, callback:fn] )\n\nAlias of `bootUser()`.\n\n### addModerator ( userId:string [, callback:fn] )\n\nAdd a moderator.\n\n### remModerator ( userId:string [, callback:fn] )\n\nRemove a moderator. (Note the person does NOT have to be in the room to remove their moderator status.)\n\n### addDj ( [callback:fn] )\n\nAdd yourself as a Dj.\n\n### remDj ( [[userId:string, ]callback:fn] )\n\nRemove a Dj.\n\n### stopSong ( [callback:fn] )\n\nSkip the current song.\n\n### skip ( [callback:fn] )\n\nAlias of `stopSong()`.\n\n### vote ( val:enum('up', 'down') [, callback:fn] )\n\nVote for the current song.\n\n### bop ( )\n\nAlias of `vote('up')`.\n\n### userAuthenticate ( [callback:fn] )\n\nAuthenticate the user.\n\n### userInfo ( [callback:fn] )\n\nGet the current user's information.\n\n### userAvailableAvatars ( callback:fn )\n\nGet all available avatars.\n\n### getAvatarIds ( callback:fn )\n\nGet the avatar ids that the bot can currently use.\n\n### getFanOf ( callback:fn )\n\nGet the list of who you've become a fan of.\n\n### getFans ( callback:fn )\n\nReturns an array of everyone who is a fan of yours.\n\n##### example\n\n```js\nbot.getFans(function (data) { console.log(data); });\n// { msgid: 7, fans: [ '4e69c14e4fe7d00e7303cd6d', ... ], success: true }\n```\n\n### getUserId ( name:string, callback:fn )\n\nGet a user's id by his name.\n\n##### Example\n\n```js\nbot.getUserId('@alain_gilbert', function (data) { console.log(data); });\n// { msgid: 12, userid: '4deadb0f4fe7d013dc0555f1', success: true }\n\n```\n\n### getProfile ( [[userId:string, ]callback:fn] )\n\nGet a user's profile.\n\n### modifyProfile ( profile:obj [, callback:fn] )\n\nModify your profile. Any missing properties from the 'profile' object will be replaced with the current values.\n\n##### Arguments\n\n* `profile`:obj (required)\n  * `name`:string (optional)\n  * `twitter`:string (optional)\n  * `facebook`:string (optional)\n  * `website`:string (optional)\n  * `about`:string (optional)\n  * `topartists`:string (optional)\n  * `hangout`:string (optional)\n* `callback`:fn (optional)\n\n##### Examples\n\n```js\nbot.modifyProfile({ website:'http://ttdashboard.com/', about:'My bot.' }, callback);\n```\n\n### modifyLaptop ( laptop:enum('linux', 'mac', 'pc', 'chrome' , 'iphone', 'android') [, callback:fn] )\n\nModify your laptop.\n\n### modifyName ( name:string [, callback:fn] )\n\nModify your name.\n\n### setAvatar ( avatarId:int [, callback:fn] )\n\nSet your avatar.\n\n### becomeFan ( userId:string [, callback:fn] )\n\nFan someone.\n\n### removeFan ( userId:string [, callback:fn] )\n\nUnfan someone.\n\n### snag ( [ callback:fn ] )\n\nSnag the song.\n\n###### Warning\n\nThis function will not add the song into the queue, only trigger the heart animation. Use this with a callback to `.playlistAdd`, or the latter method alone to queue a song;\n\n### pm (msg:string, receiverId:string [, callback:fn] )\n\nSend a private message.\n\n### pmHistory ( receiverId:string, callback:fn )\n\nGet the private conversation history.\n\n### setStatus ( status:enum('available', 'unavailable', 'away') [, callback:fn ] )\n\nSet your current status.\n\n### playlistAll ( [ playlistName:string, ] callback:fn )\n\nGet all information about a playlist.\n\n##### Arguments\n\n* `playlistName` (optional) default: `default`\n* `callback` (required)\n\n##### Examples\n\n```js\nbot.playlistAll(callback);\nbot.playlistAll(playlistName, callback);\n```\n\n### playlistAdd ( [ playlistName:string, ] songId:string [, index:int [, callback:fn]] )\n\nAdd a song to a playlist.\n\n#### Arguments\n\n* `playlistName` (optional) default: `default`\n* `songId` (required)\n* `index` (optional) default: `0`\n* `callback` (optional)\n\n##### Examples\n\n```js\nbot.playlistAdd(songId);\nbot.playlistAdd(songId, idx);\nbot.playlistAdd(songId, callback);\nbot.playlistAdd(songId, idx, callback);\nbot.playlistAdd(playlistName, songId, idx);\nbot.playlistAdd(playlistName, songId, callback);\nbot.playlistAdd(playlistName, songId, idx, callback);\nbot.playlistAdd(false, songId, callback); // Backward compatibility\nbot.playlistAdd(false, songId);           // Backward compatibility\n````\n\n### playlistRemove ( [ playlistName:string, ] index:int [, callback:fn ] )\n\nRemove a song on a playlist.\n\n##### Arguments\n\n* `playlistName` (optional) default: `default`\n* `index` (optional) default: `0`\n* `callback` (optional)\n\n##### Examples\n```js\nbot.playlistRemove();\nbot.playlistRemove(index);\nbot.playlistRemove(index, callback);\nbot.playlistRemove(playlistName, index);\nbot.playlistRemove(playlistName, index, callback);\n```\n\n### playlistReorder ( [ playlistName:string, ] indexFrom:int, indexTo:int [, callback:fn ] )\n\nReorder a playlist. Take the song at index `indexFrom` and move it to index `indexTo`.\n\n##### Arguments\n\n* `playlistName` (optional) default: `default`\n* `indexFrom` (required) default: `0`\n* `indexTo` (required) default: `0`\n* `callback` (optional)\n\n##### Examples\n\n```js\nbot.playlistReorder(indexFrom, indexTo);\nbot.playlistReorder(indexFrom, indexTo, callback);\nbot.playlistReorder(playlistName, indexFrom, indexTo);\nbot.playlistReorder(playlistName, indexFrom, indexTo, callback);\n```\n\n### searchSong ( query:string, callback:fn )\n\nSearch for songs.\n\n##### Arguments\n\n* `query`\n* `callback`\n\n##### Examples\n\n```js\nbot.searchSong(query, callback);\n```\n\n### getStickers ( callback:fn )\n\nGet all stickers informations.\n\n##### Example\n\n```js\nbot.getStickers(function (data) { console.log(data); });\n// https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/getstickers.js\n```\n\n### getStickerPlacements ( userid:string, callback:fn )\n\nGet the information about a user stickers.\n\n##### Example\n\n```js\nbot.getStickerPlacements('4e0889d4a3f7517d1100af78', function (data) { console.log(data); });\n// https://github.com/alaingilbert/Turntable-API/blob/master/turntable_data/getstickerplacements.js\n```\n### placeStickers ( placements:array.&lt;object&gt; [, callback:fn] )\n\nSets a users stickers.  The placements object is formatted the same as the placements object retrieved \nin the getStickerPlacements callback.\n\n##### Example\n\n```js\nvar placements = [{\n  top: 126,\n  angle: -23.325931577,\n  sticker_id: '4f86fe84e77989117e000008',\n  left: 78\n}];\nbot.placeStickers(placements);\n```\n",
  "readmeFilename": "README.md",
  "_id": "ttapi@2.0.1",
  "dist": {
    "shasum": "b9b1c283ee914111a508754f8733420e0c09fa41"
  },
  "_from": "ttapi",
  "_resolved": "https://registry.npmjs.org/ttapi/-/ttapi-2.0.1.tgz"
}
